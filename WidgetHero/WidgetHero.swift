//
//  WidgetHero.swift
//  WidgetHero
//
//  Created by Dilara Akdeniz on 28.09.2024.
//





//Bu kÄ±sÄ±mdan Ã¶nce widget'tan Ã¶nce widget'ta kullanÄ±lmak Ã¼zere oluÅŸturulan tÃ¼m dosyalarda saÄŸ taraflarÄ±nda bulunan Target Membership kÄ±smÄ±ndan Widget Extension da target olarka seÃ§ilmelidir. Aksi takdirde bu kÄ±sÄ±mda gÃ¶rÃ¼nmezler.
//AynÄ± zamanda projede Widget kÄ±smÄ± targettan seÃ§ilerek App.Storage o kÄ±sma da eklenmelidir.
import WidgetKit
import SwiftUI

struct Provider: AppIntentTimelineProvider {
    
    @AppStorage("hero", store: UserDefaults(suiteName: "group.com.dilarakdeniz.HeroWidget"))
    var heroData : Data = Data()
    
    //ArtÄ±k kullanÄ±cÄ±nÄ±n ana ekranÄ±nda  bulunulacaÄŸÄ±ndan dolayÄ± gÃ¶rÃ¼nÃ¼mÃ¼n daha gÃ¼zel omasÄ± gerekmektedir. AÅŸaÄŸÄ±da bulunan fonksiyon ile eÄŸer senin widget'Ä±n internetten veri Ã§ekiyorsa ya da yoÄŸun bir iÅŸlem yapÄ±lÄ±yorsa, o widget yÃ¼klenene kadar kullanÄ±cÄ±ya doÄŸru dÃ¼zgÃ¼n bir ÅŸey gÃ¶stermek iÃ§indir. Placeholder yÃ¼klenen kÄ±sÄ±m yerine default bir ÅŸey gÃ¶stermek iÃ§in kullanÄ±lÄ±yor.
    func placeholder(in context: Context) -> SimpleEntry {
        SimpleEntry(date: Date(), configuration: ConfigurationAppIntent(), hero: SuperHero(image: "batman", name: "Batman", realName: "Bruce Wayne")) //Default olarak batman gÃ¶sterdik.
    }

    //Zaman iÃ§erisinde widget'lar deÄŸiÅŸtirilebilir. Ã–rneÄŸin sabah 9-12 arasÄ± farklÄ± akÅŸam farklÄ± bir ÅŸey gÃ¶rÃ¼nsÃ¼n gibi olabilir. Snapshot ve timeline fonksiyonlarÄ± bunun iÃ§in oluÅŸturulmuÅŸtur. (Bizim ÅŸu anki widget'Ä±mÄ±zda bu yok Ã§Ã¼nkÃ¼ biz kullanÄ±cÄ± hangi superHero'yu seÃ§erse onu gÃ¶stereceÄŸiz.
    //Snapshot anlÄ±k olarak veritabanÄ±nda bulunan ÅŸeyi gÃ¶stermek iÃ§in kullanÄ±lÄ±r.
    func snapshot(for configuration: ConfigurationAppIntent, in context: Context) async -> SimpleEntry {
        //SimpleEntry(date: Date(), configuration: configuration, hero: <#SuperHero#>)
        
        if let hero = try? JSONDecoder().decode(SuperHero.self, from: heroData) {
            return SimpleEntry(date: Date(), configuration: configuration, hero: hero)
        } else{
            return SimpleEntry(date: Date(), configuration: configuration, hero: SuperHero(image: "batman", name: "Batman", realName: "Bruce Wayne"))
        }
        
    }
    
    func timeline(for configuration: ConfigurationAppIntent, in context: Context) async -> Timeline<SimpleEntry> {
        
        if let hero = try? JSONDecoder().decode(SuperHero.self, from: heroData) {
            let entry = SimpleEntry(date: Date(), configuration: configuration, hero: hero)
            let timeline = Timeline(entries: [entry], policy: .never)
            return timeline
        } else{
            let entry = SimpleEntry(date: Date(), configuration: configuration, hero: SuperHero(image: "batman", name: "Batman", realName: "Bruce Wayne"))
            let timeline = Timeline(entries: [entry], policy: .never)
            return timeline
        }
        
        /*
        var entries: [SimpleEntry] = []

        // Generate a timeline consisting of five entries an hour apart, starting from the current date.
        let currentDate = Date()
        for hourOffset in 0 ..< 5 {
            let entryDate = Calendar.current.date(byAdding: .hour, value: hourOffset, to: currentDate)!
            let entry = SimpleEntry(date: entryDate, configuration: configuration, hero: <#SuperHero#>)
            entries.append(entry)
        }

        return Timeline(entries: entries, policy: .never) //Zamana gÃ¶re deÄŸiÅŸim yapmayacaÄŸÄ±mÄ±z iÃ§in policy kÄ±smÄ±nÄ± never yaptÄ±k
         */
    }
}
//Entry bizim gÃ¶stermek istediÄŸimiz veridir. Ã–rneÄŸin bizim iÃ§in bu superHero
struct SimpleEntry: TimelineEntry {
    let date: Date
    let configuration: ConfigurationAppIntent
    let hero: SuperHero
}

//Tam olarak Ã¶n yÃ¼zde gÃ¶sterilecek kÄ±sÄ±m
struct WidgetHeroEntryView : View {
    var entry: Provider.Entry

    var body: some View {
        VStack {
            CircularImageView(image: Image(entry.hero.image))
            Text(entry.hero.name)
                    .font(.headline)
            Text(entry.hero.realName)
                    .font(.subheadline)
        }
    }
}

struct WidgetHero: Widget {
    let kind: String = "WidgetHero" //Hangi tipten bir widget. Birden fazla widget olursa diye var

    var body: some WidgetConfiguration {
        AppIntentConfiguration(kind: kind, intent: ConfigurationAppIntent.self, provider: Provider()) { entry in
            WidgetHeroEntryView(entry: entry)
                .containerBackground(.fill.tertiary, for: .widget)
        }
    }
}
/*
extension ConfigurationAppIntent {
    fileprivate static var smiley: ConfigurationAppIntent {
        let intent = ConfigurationAppIntent()
        intent.favoriteEmoji = "ğŸ˜€"
        return intent
    }
    
    fileprivate static var starEyes: ConfigurationAppIntent {
        let intent = ConfigurationAppIntent()
        intent.favoriteEmoji = "ğŸ¤©"
        return intent
    }
}
 */

#Preview(as: .systemSmall) {
    WidgetHero()
} timeline: {
    SimpleEntry(date: Date(), configuration: ConfigurationAppIntent(), hero: SuperHero(image: "batman", name: "Batman", realName: "Bruce Wayne"))
}
